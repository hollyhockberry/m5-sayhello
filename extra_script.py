Import("env")

import os
import re

'''Parse the header file and convert the enum to a dictionary'''
def parse_header(path: str, typename: str) -> dict:
    with open(path, 'r') as f:
        content = f.read()

    def remove_comments(content):
        content = re.sub(r'//.*', '', content)
        content = re.sub(r'/\*.*?\*/', '', content, flags=re.DOTALL)
        return content

    content = remove_comments(content)
    enum_pattern = re.compile(
        r'enum\s+(\w+)\s*(?::\s*\w+)?\s*\{([^}]*)\}', re.MULTILINE | re.DOTALL
    )

    enums = {}
    for match in enum_pattern.finditer(content):
        if match.group(1) != typename:
            continue
        v = 0
        for item in match.group(2).split(','):
            item = item.strip()
            if item:
                if '=' in item:
                    key, value = item.split('=')
                    key = key.strip()
                    value = value.strip()
                    if value.startswith('0b'):
                        value = int(value, 2)
                    elif value.isdigit():
                        value = int(value)                        
                    else:
                        v = enums[value] + 1
                        continue
                else:
                    key = item
                    value = v
                enums[key] = value
                v = value + 1
    return enums

def make_case(enum: dict, prefix: str, ignore: str|None) -> str:
    def convert(e):
        for k, v in e.items():
            if ignore != None and k.startswith(ignore):
                continue
            yield f'case {v}: return "{k.replace(prefix, "")}";'
    return '\n'.join(convert(enum))

def make_method(name: str, enum: dict, prefix: str, ignore: str|None=None) -> str:
    return f'''static const char* {name}(int board) {{
switch (board) {{
{make_case(enum, prefix, ignore)}
default: break;
}}
return "unknown";
}}'''

boards = parse_header(
    os.path.join('.pio/libdeps', env['PIOENV'], 'M5GFX/src/lgfx/boards.hpp'),
    'board_t')
touch = parse_header(
    os.path.join('.pio/libdeps', env['PIOENV'], 'M5Unified/src/utility/Touch_Class.hpp'),
    'touch_state_t')
imu = parse_header(
    os.path.join('.pio/libdeps', env['PIOENV'], 'M5Unified/src/utility/IMU_Class.hpp'),
    'imu_t')
print(imu)

header = f'''
// This file is generated by script
// Do not edit it manually
#ifndef CONSTANTS_HPP_
#define CONSTANTS_HPP_
namespace hhb {{
class Constants {{
public:
{make_method('getBoardName', boards, 'board_')}
{make_method('getTouchStateName', touch, '', 'mask_')}
{make_method('getImuTypeName', imu, 'imu_')}
}};
}}
#endif'''

with open('include/constants.hpp', 'w') as f:
    f.write(header)
