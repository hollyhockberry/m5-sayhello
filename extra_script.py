Import("env")

import os
import re

'''Parse the header file and convert the enum to a dictionary'''
def parse_header(path: str) -> dict:
    with open(path, 'r') as f:
        content = f.read()

    def remove_comments(content):
        content = re.sub(r'//.*', '', content)
        content = re.sub(r'/\*.*?\*/', '', content, flags=re.DOTALL)
        return content

    content = remove_comments(content)
    enum_pattern = re.compile(
        r'enum\s+(\w+)\s*\{([^}]*)\}', re.MULTILINE | re.DOTALL
    )
    enums = {}
    for match in enum_pattern.finditer(content):
        v = 0
        for item in match.group(2).split(','):
            item = item.strip()
            if item:
                if '=' in item:
                    key, value = item.split('=')
                    key = key.strip()
                    value = value.strip()
                    if value.isdigit():
                        value = int(value)
                    else:
                        v = enums[value] + 1
                        continue
                else:
                    key = item
                    value = v
                enums[key] = value
                v = value + 1
    return enums

def make_case(enum: dict) -> str:
    def convert(e):
        for k, v in e.items():
            yield f'case {v}: return "{k.replace("board_", "")}";'
    return '\n'.join(convert(enum))


path = os.path.join('.pio/libdeps', env['PIOENV'], 'M5GFX/src/lgfx/boards.hpp')
enum = parse_header(path)
header = f'''
// This file is generated by script
// Do not edit it manually
#ifndef BOARDNAME_HPP_
#define BOARDNAME_HPP_
class BoardName {{
public:
static const char* getBoardName(int board) {{
switch (board) {{
{make_case(enum)}
default: break;
}}
return "unknown";
}}
}};
#endif'''

with open('include/boardname.hpp', 'w') as f:
    f.write(header)
